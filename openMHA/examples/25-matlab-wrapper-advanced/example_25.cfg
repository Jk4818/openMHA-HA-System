# This file is part of the HörTech Open Master Hearing Aid (openMHA)
# Copyright © 2021 HörTech gGmbH
#
# openMHA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# openMHA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License, version 3 for more details.
#
# You should have received a copy of the GNU Affero General Public License,
# version 3 along with openMHA.  If not, see <http://www.gnu.org/licenses/>.

# We have to tell the MHA how many audio channels to process.
# The "nchannels_in" variable accepts positive integers.
nchannels_in = 2
# The number of output channels is auto-deduced by the MHA.

# When we perform real-time signal processing, we process the signal
# in small chunks of data.
# The setting "fragsize" tells the MHA how many audio samples per channel
# are to be processed in each chunk.
fragsize=128

# MHA processes discrete-time digital audio signals with a fixed
# sampling rate.  The sampling rate tells MHA how many samples per
# second have been digitized in each audio channel.
srate = 16000

# In this example, we load the IO library that reads from and writes to sound files.
iolib = MHAIOFile

# This variable is used to select the input sound file.  The file name
# of the sound file to use as the input sound signal to the MHA is
# written to this variable.
io.in = example_25.wav

# Note that to ensure that the sound file was properly closed, the MHA
# should be told to exit (cmd=quit).
io.out = out.wav

# The MHA framework can load a single MHA plugin to process the data.
# We tell the MHA which plugin to load with the "mhalib" variable.
# Usually MHA configurations consist of more than just one plugin.
# MHA provides structuring plugins that can themselves load other
# plugins for this purpose.
mhalib = matlab_wrapper

# Tell the matlab_wrapper plugin to look for the user library
# example_25 (without suffix!). The plugin then loads the library
# and tries to resolve the callback functions and parses the user configuration
# defined in init()
mha.library_name=example_25

# Execute the prepare callback. As we reset the configuration variables
# in our prepare function, all configuration will be overwritten during
# prepare(), so we can only configure our plugin after the callback 
cmd=prepare

# Set the channel delay to 50 samples and 100 samples. One entry per
# channel
mha.delay=[50 100]

# Set the channel wise gain in dB to -5 for both channels. Helps to prevent
# clipping
mha.gain=[-5 -50]

#This configuration file can be run with the following command
#mha ?read:example_25.cfg cmd=start cmd=quit
